Getting started
===============

Getting ``django-crucrudile`` to automatically generate your URL
patterns is a 4-step process :

1. Define your views
2. Define your model mixins
3. Use these model mixins in your models
4. Call automatic patterns functions in your urls.py

1. Views
--------

``django-crucrudile`` needs some functions and attributes defined on
the view class, in order to get informations about what kind of action
the view is representing, and what arguments are needed. All these
functions and attributes are defined in
:class:``django_crucrudile.views.mixins.ModelActionMixin``.

It is perfectly possible to use a Django generic view (or any view),
that does not define the functions and attributes aforementionned,
there are two ways to do so:

 - Subclass a view, and make it inherit from ``ModelActionMixin``
 - Don't do anything, and ``make_model_mixin`` will patch the given
   view argument with the functions and attributes of
   ``ModelActionMixin`` (this behaviour can be disabled using the
   ``no_auto_view_mixin`` argument to ``make_model_mixin``

Either way, in case the view needs URL arguments, you will have to
define in the ``url_args`` attribute of your view. This attribute
should be a list of needed arguments (express the arguments as regex
capture groups, same as in ``urls.py``)

Usually, the "action name" is taken from the view class name, stripped
of the tailing "View", and converted from CamelCase to dash-separated
text. For example, a ``FilteredListView`` will have, as action name,
``filtered-list``. You can override this behaviour by defining the
``action`` attribute on your view.

Personally, I define my views in a ``views.py``, using Django's
generic views as a base, making it inherit from ``ModelActionMixin``,
and setting the ``url_args`` and ``action`` attributes. But you can
also just set the ``url_args`` attribute on the detail, update and
delete Django generic views (these views require an URL argument to
know which object it needs to handle), and use these views in
``make_model_mixin``.

Model mixins
------------

Once you defined your views, defining your model mixins is very
straightforward, just use ``make_model_mixin``, with a view as
argument, or ``make_model_mixins`` with a list of views as argument :

    Listable = make_model_mixin(ListView)
    Detailable = make_model_mixin(DetailView)

Or

    Listable, Detailable = make_model_mixin([ListView, DetailView])

Models
------

TODO

``urls.py``
-----------

TODO
